AWSTemplateFormatVersion: "2010-09-09"

Description: Adds users and dummy data to the database.

Parameters:
  VpcID:
    Type: AWS::EC2::VPC::Id

  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id

  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id

  LayerVersionArn:
    Type: String

  Endpoint:
    Type: String

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  CreateRDSProxy:
    Type: String

  DBSecretArn:
    Type: String

  DBProxyName:
    Type: String

  DBProxyArn:
    Type: String

  ProxySecurityGroup:
    Type: String # Has to be type String as NoProxy has 'NA' value

  UsersToCreate:
    Type: Number

Conditions:
  IsRDSProxy: !Equals [!Ref CreateRDSProxy, true]

  NoRDSProxy: !Equals [!Ref CreateRDSProxy, false]

Transform: AWS::Serverless-2016-10-31

Resources:
  ProxyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/functions/proxy
      Description: Tenant add data function.
      Environment:
        Variables:
          ENDPOINT: !Ref Endpoint
          USER: admin
          USERS_TO_CREATE: !Ref UsersToCreate
          REGION: !Sub ${AWS::Region}
          SECRETARN: !Ref DBSecretArn
          DATABASE: main
          NUMBER_OF_ROWS: 1000
          PROXY_NAME: !Ref DBProxyName
      FunctionName: !Sub fn-${AWS::StackName}
      Handler: cr_add_users_proxy.handler
      Layers:
        - !Ref LayerVersionArn
      Role: !GetAtt LambdaAddUsersRole.Arn
      Runtime: python3.8
      Timeout: 900
      Tracing: Active
      VpcConfig:
        SecurityGroupIds:
          - !Ref LamdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
    Condition: IsRDSProxy

  ProxyLambdaCustom:
    Type: Custom::ProxyAddUsers
    Properties:
      ServiceToken: !GetAtt ProxyLambdaFunction.Arn
    Version: "1.0"
    Condition: IsRDSProxy

  NoProxyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/functions/noproxy
      Description: Tenant add data function.
      Environment:
        Variables:
          ENDPOINT: !Ref Endpoint
          USER: admin
          USERS_TO_CREATE: !Ref UsersToCreate
          NUMBER_OF_ROWS: 1000
          REGION: !Sub ${AWS::Region}
          DATABASE: main
          SECRETARN: !Ref DBSecretArn
      FunctionName: !Sub fn-${AWS::StackName}
      Handler: cr_add_users_noproxy.handler
      Layers:
        - !Ref LayerVersionArn
      Role: !GetAtt LambdaAddUsersRole.Arn
      Runtime: python3.8
      Timeout: 900
      Tracing: Active
      VpcConfig:
        SecurityGroupIds:
          - !Ref LamdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
    Condition: NoRDSProxy

  NoProxyLambdaCustom:
    Type: Custom::ProxyAddUsers
    Properties:
      ServiceToken: !GetAtt NoProxyLambdaFunction.Arn
    Version: "1.0"
    Condition: NoRDSProxy

  LambdaAddUsersRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: XraySeviceAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action:
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
                - xray:GetSamplingRules
                - xray:GetSamplingTargets
                - xray:GetSamplingStatisticSummaries
              Resource: '*'
        - PolicyName: CloudWatchLogsSeviceAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
                - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
        - PolicyName: VPCSeviceAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                Resource: '*'
        - PolicyName: SecretsManagerSeviceAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DBSecretArn
              - Effect: Allow
                Action:
                  - secretsmanager:CreateSecret
                  - secretsmanager:DeleteSecret
                  - secretsmanager:TagResource
                Resource: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:Amazon_rds_proxy_multitenant_load_test/Proxy_secret_for_user*

  DBProxyPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DBProxyServiceAccess
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - rds:ModifyDBProxy
            Resource: !Ref DBProxyArn
      Roles:
        - !Ref LambdaAddUsersRole
    Condition: IsRDSProxy

  LamdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda Security Group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all https outbound traffic
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - DestinationSecurityGroupId: !Ref RDSSecurityGroup
          Description: Allow db outbound traffic
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
      VpcId: !Ref VpcID

  LambdaToRDSIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Lambda to RDS ingress rule
      FromPort: 3306
      GroupId: !Ref RDSSecurityGroup
      SourceSecurityGroupId: !Ref LamdaSecurityGroup
      ToPort: 3306

  LambdaToProxyIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Lambda to Proxy ingress rule
      FromPort: 3306
      GroupId: !Ref ProxySecurityGroup
      SourceSecurityGroupId: !Ref LamdaSecurityGroup
      ToPort: 3306
    Condition: IsRDSProxy
